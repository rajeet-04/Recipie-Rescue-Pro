# Recipe Rescue Pro - Complete Product Specification

**Vision**: Build a comprehensive recipe platform that combines Supercook's 11M+ recipe database with intelligent expiration tracking, AI-powered ingredient recognition, and smart waste reduction features.

**Target Timeline**: 3-6 months full development  
**Team Size**: Solo developer (you) with potential for expansion  
**Market Position**: Supercook + SmartPantry + Mealime combined

---

## üìä Product Positioning

### Competitive Analysis

| Feature | Supercook | Recipe Rescue Pro | Advantage |
|---------|-----------|-------------------|-----------|
| Recipe Search by Ingredients | ‚úÖ | ‚úÖ | Match |
| 11M+ Recipes from 18k sites | ‚úÖ | ‚úÖ | Match |
| Manual Ingredient Entry | ‚úÖ | ‚úÖ | Match |
| **AI Photo Recognition** | ‚ùå | ‚úÖ | **UNIQUE** |
| **Expiration Date Tracking** | ‚ùå | ‚úÖ | **UNIQUE** |
| **Waste Analytics** | ‚ùå | ‚úÖ | **UNIQUE** |
| **Priority Recipes (expiring items)** | ‚ùå | ‚úÖ | **UNIQUE** |
| Voice Input | ‚úÖ | ‚úÖ | Match |
| Dietary Filters | ‚úÖ (6 options) | ‚úÖ (20+ options) | Better |
| Shopping List | ‚úÖ | ‚úÖ Enhanced | Better |
| Recipe Rating | ‚úÖ | ‚úÖ + ML ranking | Better |
| Meal Planning | ‚ùå | ‚úÖ | **UNIQUE** |
| Barcode Scanning | ‚ùå | ‚úÖ | **UNIQUE** |
| Cost Tracking | ‚ùå | ‚úÖ | **UNIQUE** |
| Family Sharing | ‚ùå | ‚úÖ | **UNIQUE** |

---

## üéØ Core Features (All Phases)

### Phase 1: Foundation (Months 1-2)
**Goal**: Match Supercook's core functionality + basic expiration tracking

#### 1.1 Intelligent Pantry Management
- **Manual ingredient entry** with 2000+ searchable ingredients
- **AI photo recognition** (Gemini Vision API)
  - Bulk scanning: Take photo of entire fridge/pantry
  - Single item scanning: Quick add specific items
  - Confidence scoring and user confirmation
  - Learning system: Improves accuracy over time
- **Voice input mode** (Web Speech API / React Native Voice)
  - "I have chicken, rice, onions, garlic..."
  - Automatic ingredient parsing and addition
- **Barcode scanning** (QuaggaJS / React Native Camera)
  - Scan packaged goods
  - Auto-pull product info, nutrition, typical expiration
  - Integration with Open Food Facts API
- **Ingredient categorization**
  - Produce, Meat, Dairy, Grains, Spices, Condiments, etc.
  - Custom categories
  - Smart suggestions based on common groupings

#### 1.2 Expiration Intelligence System
- **Smart expiration tracking**
  - Auto-suggest expiration dates based on ingredient type
  - Different estimates for refrigerated/frozen/pantry
  - User can override and system learns preferences
- **Storage location aware**
  - Track where items are stored (fridge, freezer, pantry, counter)
  - Adjust expiration estimates accordingly
  - Visual organization matching real kitchen layout
- **Expiration alerts**
  - "3 items expiring in 2 days"
  - Daily digest of what needs to be used
  - Smart grouping: "These 5 items can make X recipe"
- **Visual expiration indicators**
  - Green: Fresh (7+ days)
  - Yellow: Use soon (3-6 days)
  - Orange: Urgent (1-2 days)
  - Red: Expiring today/expired
  - Gray: Frozen (extended life)

#### 1.3 Recipe Search Engine (Supercook Integration)
- **Ingredient-based search**
  - Use items in your pantry
  - Show recipes you can make RIGHT NOW
  - Show recipes missing 1-2 ingredients
  - Show recipes missing 3-5 ingredients
- **Advanced filters** (20+ options)
  - Dietary: Vegetarian, Vegan, Pescatarian, Keto, Paleo, Gluten-Free, Dairy-Free, Nut-Free, Soy-Free, Low-Carb, Low-Fat, Low-Sodium, High-Protein
  - Cuisine: Italian, Mexican, Indian, Chinese, Japanese, Thai, Mediterranean, American, French, Caribbean, Korean, Vietnamese
  - Meal Type: Breakfast, Lunch, Dinner, Snack, Dessert, Appetizer, Side Dish
  - Cooking Method: No-Cook, Slow Cooker, Instant Pot, Air Fryer, Grilling, Baking, Stovetop, Oven-Free
  - Time: Under 15 min, 15-30 min, 30-60 min, 1+ hour
  - Difficulty: Beginner, Intermediate, Advanced
  - Occasion: Weeknight, Party, Holiday, Meal Prep, Kid-Friendly, Date Night
- **Smart recipe ranking algorithm**
  ```
  Score = 
    (% ingredients you have) √ó 40 +
    (urgency of expiring ingredients) √ó 30 +
    (user rating) √ó 15 +
    (preparation time preference) √ó 10 +
    (cuisine preference) √ó 5
  ```
- **Recipe aggregation** from multiple sources
  - 11M+ recipes from 18,000 sites
  - Parse and normalize recipe data
  - Store metadata: prep time, cook time, servings, difficulty, nutrition
- **Multi-language support** (20 languages)
  - English, Spanish, French, German, Italian, Portuguese, Chinese, Japanese, Korean, Hindi, Arabic, Russian, Dutch, Swedish, Polish, Turkish, Thai, Vietnamese, Greek, Hebrew

#### 1.4 Recipe Details & Management
- **Comprehensive recipe view**
  - Ingredients list with quantities
  - Step-by-step instructions
  - Prep time, cook time, total time
  - Servings (adjustable)
  - Nutrition information
  - Source link
  - User ratings and reviews
  - Photos/videos when available
- **Ingredient matching indicator**
  - ‚úÖ Have: chicken, rice, onion
  - üõí Need: soy sauce, ginger
  - üí° Suggested alternatives
- **One-click actions**
  - Add missing ingredients to shopping list
  - Mark recipe as "cooked"
  - Save to favorites
  - Add to meal plan
  - Share recipe
  - Report incorrect data

---

### Phase 2: Intelligence Layer (Month 3)
**Goal**: Add AI-powered personalization and waste reduction features

#### 2.1 Smart Recommendations Engine
- **Personalized recipe suggestions**
  - Learn from cooking history
  - Analyze favorite cuisines and ingredients
  - Consider time of day (breakfast suggestions in morning)
  - Seasonal ingredient awareness
  - Family preferences (if shared account)
- **"Use This Week" feature**
  - Weekly meal suggestions based on expiring items
  - Balanced nutrition across week
  - Variety in cuisines and cooking methods
  - Considers your typical cooking schedule
- **Smart substitutions**
  - "Don't have milk? Use almond milk"
  - Suggests alternatives based on what you have
  - Explains how substitution affects recipe
- **Recipe discovery**
  - "Try something new" suggestions
  - Trending recipes in your region
  - Seasonal recipe recommendations
  - Similar recipes carousel

#### 2.2 Waste Reduction Analytics
- **Personal waste dashboard**
  - Total food saved (weight)
  - Money saved (estimated value)
  - Carbon footprint reduced
  - Waste trends over time
  - Most wasted items (learn and improve)
- **Environmental impact**
  - "You've prevented X kg of CO2 emissions"
  - Compare to average household waste
  - Gamification: Badges and achievements
  - Social sharing of milestones
- **Waste alerts**
  - "You haven't used spinach in 4 days"
  - "Tomatoes will expire tomorrow - here are 5 quick recipes"
  - Weekly waste report with improvement tips
- **Learning insights**
  - "You often waste cilantro - buy smaller bunches"
  - "Your apples last 3 days longer in the fridge"
  - "You cook fish within 2 days - keep it up!"

#### 2.3 Advanced Meal Planning
- **Weekly meal planner**
  - Drag-and-drop calendar interface
  - Auto-generate meal plans based on inventory
  - Balance nutrition across week
  - Consider prep time and difficulty
  - Batch cooking suggestions
- **Prep day assistant**
  - Group recipes by shared ingredients
  - Optimal cooking order
  - Make-ahead instructions
  - Storage recommendations
- **Leftover management**
  - Track partial ingredients
  - Suggest recipes for leftovers
  - Portion planning to minimize waste
- **Special occasions**
  - Holiday meal planning
  - Party menu builder
  - Dietary accommodation helper

#### 2.4 Shopping List Intelligence
- **Smart shopping lists**
  - Auto-generated from meal plan
  - Organized by store layout/category
  - Quantity optimization (recipes serving adjustments)
  - Price tracking (optional API integration)
  - Check off items in-store
- **Store integration**
  - Instacart, Amazon Fresh, Walmart+
  - One-click order missing ingredients
  - Price comparison
  - Delivery scheduling
- **Budget tracking**
  - Set weekly/monthly grocery budget
  - Track spending against budget
  - Suggest budget-friendly alternatives
  - Show cost per recipe
- **Recurring items**
  - Smart auto-add (you buy milk every week)
  - Predict when you'll run out
  - Subscription optimization suggestions

---

### Phase 3: Social & Advanced Features (Month 4)
**Goal**: Build community and advanced power-user features

#### 3.1 Family & Household Sharing
- **Multi-user households**
  - Shared pantry inventory
  - Individual dietary preferences
  - Cooking schedule coordination
  - "Who's cooking tonight?"
- **Permission levels**
  - Admin: Full control
  - Editor: Add/remove items, mark used
  - Viewer: See inventory, request items
- **Activity feed**
  - "John used chicken for dinner"
  - "Sarah added milk to shopping list"
  - "Emily cooked Thai Basil Chicken - 5‚≠ê"
- **Communication tools**
  - In-app notes: "Don't use the eggs, saving for cake"
  - Meal requests: "Can someone make pasta this week?"
  - Shopping assignments

#### 3.2 Recipe Community Features
- **User-generated content**
  - Submit your own recipes
  - Photo uploads
  - Video tutorials
  - Cooking tips and notes
- **Social features**
  - Follow other users
  - Share recipes publicly or with friends
  - Comment on recipes
  - Like and save others' recipes
  - Recipe collections/boards
- **Cooking challenges**
  - Weekly ingredient challenge
  - Zero-waste week
  - Budget cooking challenge
  - Community cook-alongs
- **Leaderboards**
  - Most waste prevented
  - Most creative recipes
  - Helpful community members
  - Streak tracking (consecutive days cooking)

#### 3.3 Recipe Creator Studio
- **Recipe builder**
  - Add ingredients with auto-complete
  - Step-by-step instruction editor
  - Photo/video upload
  - Nutrition calculator
  - Serving size adjuster
  - Timing and difficulty tags
- **Recipe testing**
  - Mark as "tested by X users"
  - Collect feedback
  - Iterate and improve
- **Recipe monetization** (optional)
  - Premium recipes from professional chefs
  - Support creator tips
  - Affiliate links for special equipment
- **Import recipes**
  - Paste URL from any recipe site
  - AI parsing and formatting
  - Auto-extract ingredients and steps
  - Save to personal collection

#### 3.4 Advanced Inventory Features
- **Batch operations**
  - "Mark all produce as used"
  - "Extend expiration for freezer items"
  - "Clear all expired items"
  - Bulk edit categories
- **Inventory history**
  - See what you bought last month
  - Seasonal buying patterns
  - Frequency analysis
  - Repeat last shopping trip
- **Smart reordering**
  - "You're out of staples: eggs, milk, bread"
  - Auto-add frequently purchased items
  - Seasonal adjustments
- **Inventory templates**
  - "Taco Tuesday Essentials"
  - "Baking Basics"
  - "Pizza Night Kit"
  - Custom bundles

---

### Phase 4: Pro Features & Monetization (Month 5)
**Goal**: Premium features and revenue streams

#### 4.1 Pro Tier Features
**Free Tier**:
- 50 active pantry items
- 10 photo scans/month
- Basic recipe search
- Manual expiration tracking
- Single household
- Ads (non-intrusive)

**Pro Tier ($4.99/month or $39.99/year)**:
- ‚ú® Unlimited pantry items
- ‚ú® Unlimited photo scans
- ‚ú® Advanced AI recommendations
- ‚ú® Meal planning (up to 4 weeks)
- ‚ú® Multiple households (3 max)
- ‚ú® Priority customer support
- ‚ú® Export data (CSV, PDF)
- ‚ú® Ad-free experience
- ‚ú® Early access to new features

**Family Tier ($7.99/month or $69.99/year)**:
- Everything in Pro
- ‚ú® Up to 6 household members
- ‚ú® Unlimited households
- ‚ú® Advanced sharing controls
- ‚ú® Family nutrition dashboard
- ‚ú® Bulk meal planning
- ‚ú® Custom recipe collections

#### 4.2 Additional Revenue Streams
1. **Affiliate Partnerships**
   - Grocery delivery (5-10% commission)
   - Kitchen equipment (Amazon Associates)
   - Meal kit services
   - Cookware brands
2. **B2B Licensing**
   - White-label for grocery stores
   - Corporate wellness programs
   - Educational institutions
   - Sustainability initiatives
3. **Data Insights** (anonymized, aggregated)
   - Food waste trends reports
   - Consumer behavior analysis
   - Recipe popularity data
   - Sell to food industry (ethical considerations)
4. **Premium Content**
   - Celebrity chef recipes ($1.99 each)
   - Exclusive cooking courses
   - Meal prep guides
   - Dietary transformation programs

#### 4.3 Marketing & Growth Features
- **Referral program**
  - "Invite 3 friends ‚Üí 1 month Pro free"
  - Both parties get rewards
  - Shareable referral links
- **Content marketing**
  - Blog: Waste reduction tips, recipes, nutrition
  - YouTube: Cooking tutorials, app guides
  - Social media: Instagram, TikTok food trends
  - Email newsletter: Weekly recipes
- **SEO optimization**
  - Recipe pages indexed by Google
  - Rich snippets for search results
  - Long-tail keyword targeting
  - Backlink strategy
- **Partnerships**
  - Sustainability organizations
  - Food banks (donate excess)
  - Influencer collaborations
  - Press coverage strategy

---

### Phase 5: Polish & Scale (Month 6+)
**Goal**: Optimization, expansion, advanced integrations

#### 5.1 Performance Optimization
- **Speed improvements**
  - Recipe search < 500ms
  - Image upload < 2s
  - AI recognition < 5s
  - Aggressive caching strategy
- **Offline mode**
  - View saved recipes offline
  - Queue actions for sync
  - Downloadable recipe books
- **Image optimization**
  - WebP format
  - Lazy loading
  - CDN delivery
  - Responsive images

#### 5.2 Advanced Integrations
- **Smart home integration**
  - Amazon Alexa: "Alexa, what can I make for dinner?"
  - Google Home: "Hey Google, add eggs to my pantry"
  - Smart fridges: Auto-detect inventory
  - IoT scales: Weigh ingredients automatically
- **Fitness app sync**
  - MyFitnessPal: Nutrition tracking
  - Apple Health / Google Fit
  - Macro tracking
  - Calorie goals
- **Calendar integration**
  - Google Calendar: Meal plan sync
  - Reminders for meal prep
  - Cooking time blocking
- **Note-taking apps**
  - Notion, Evernote recipe import
  - Export recipes to notes
  - Sync personal recipe notes

#### 5.3 Enterprise Features (B2B)
- **Restaurant/Cafe mode**
  - Bulk inventory management
  - Cost tracking per recipe
  - Waste reduction analytics
  - Menu planning
  - Vendor management
- **Educational institution licensing**
  - Cooking class curriculum
  - Student meal planning
  - Nutrition education
  - Campus dining integration
- **Corporate wellness**
  - Employee meal programs
  - Cafeteria integration
  - Health challenge campaigns
  - ROI reporting

#### 5.4 International Expansion
- **Localization**
  - 20+ language full translations
  - Regional ingredient databases
  - Local cuisine preferences
  - Cultural dietary considerations
- **Regional recipe sources**
  - Partner with local food blogs
  - Country-specific recipe sites
  - Traditional recipes database
- **Currency & measurements**
  - Auto-convert units (metric/imperial)
  - Local currency for cost tracking
  - Regional pricing data

---

## üèóÔ∏è Technical Architecture

### Frontend Stack

**Web Application** (Primary Platform)
```
Framework: React 19 + TypeScript
Build Tool: Vite
Routing: React Router v6
State Management: Zustand (lightweight) + React Query (server state)
UI Library: TailwindCSS v4 + shadcn/ui
Forms: React Hook Form + Zod validation
Icons: Lucide React
Animations: Framer Motion
Charts: Recharts
Image Handling: react-image-crop, compressorjs
PWA: Vite PWA plugin (installable web app)
```

**Mobile Application** (React Native)
```
Framework: React Native + Expo
Navigation: React Navigation v6
State: Redux Toolkit (mobile requires more robust state)
UI: React Native Paper + NativeBase
Camera: Expo Camera
Barcode: react-native-vision-camera
Voice: react-native-voice
Offline: WatermelonDB (local database)
Push Notifications: Expo Notifications
```

**Shared Code** (Monorepo)
```
Repository Structure:
/packages
  /ui-components (shared components)
  /utils (shared utilities)
  /types (TypeScript types)
  /api-client (API wrapper)
/apps
  /web (React web app)
  /mobile (React Native app)
  /admin (Admin dashboard)
/services
  /api (Backend services)
```

### Backend Architecture

**Option A: Serverless (Recommended for MVP ‚Üí Scale)**
```
Platform: Vercel (web) + Supabase (database + auth + storage)
API: Vercel Serverless Functions (Node.js)
Database: PostgreSQL (Supabase)
File Storage: Supabase Storage
Auth: Supabase Auth
Realtime: Supabase Realtime (for family sharing)
Cron Jobs: Vercel Cron (expiration alerts)
```

**Option B: Traditional Backend (If needed later)**
```
Server: Node.js + Express
Database: PostgreSQL (RDS or Railway)
ORM: Prisma
Cache: Redis (Upstash)
Queue: BullMQ (for background jobs)
File Storage: S3 or Cloudinary
Hosting: Railway, Render, or DigitalOcean
```

**Microservices Breakdown**:
```
/api
  /auth          # User authentication
  /inventory     # Pantry management
  /recipes       # Recipe search & management
  /ai            # Gemini vision processing
  /analytics     # Waste tracking & insights
  /notifications # Alerts & reminders
  /shopping      # Shopping list management
  /meal-plan     # Meal planning
  /social        # Community features
  /admin         # Admin tools
```

### Database Schema (Complete)

```sql
-- ============================================
-- USERS & AUTHENTICATION
-- ============================================

CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT UNIQUE NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  timezone TEXT DEFAULT 'UTC',
  locale TEXT DEFAULT 'en',
  subscription_tier TEXT DEFAULT 'free', -- free, pro, family
  subscription_expires_at TIMESTAMP,
  onboarding_completed BOOLEAN DEFAULT false,
  preferences JSONB DEFAULT '{}',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  last_login_at TIMESTAMP
);

CREATE TABLE user_preferences (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  dietary_restrictions TEXT[], -- ['vegetarian', 'gluten-free']
  favorite_cuisines TEXT[],
  disliked_ingredients TEXT[],
  cooking_skill_level TEXT DEFAULT 'intermediate',
  preferred_meal_times JSONB, -- {"breakfast": "08:00", "lunch": "12:00", "dinner": "19:00"}
  portion_size_preference TEXT DEFAULT 'medium', -- small, medium, large
  waste_tolerance TEXT DEFAULT 'medium', -- low, medium, high (affects expiration urgency)
  notification_preferences JSONB DEFAULT '{}',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- ============================================
-- HOUSEHOLDS (Multi-user sharing)
-- ============================================

CREATE TABLE households (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  owner_id UUID REFERENCES users(id) ON DELETE CASCADE,
  invite_code TEXT UNIQUE,
  max_members INTEGER DEFAULT 1, -- Increases with subscription
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE household_members (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  role TEXT DEFAULT 'editor', -- admin, editor, viewer
  joined_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(household_id, user_id)
);

CREATE INDEX idx_household_members ON household_members(household_id, user_id);

-- ============================================
-- INVENTORY MANAGEMENT
-- ============================================

CREATE TABLE storage_locations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  name TEXT NOT NULL, -- 'Fridge', 'Freezer', 'Pantry', 'Counter'
  type TEXT NOT NULL, -- 'refrigerated', 'frozen', 'room_temp'
  icon TEXT, -- emoji or icon identifier
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE ingredient_categories (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT UNIQUE NOT NULL,
  parent_category_id UUID REFERENCES ingredient_categories(id),
  icon TEXT,
  sort_order INTEGER DEFAULT 0
);

-- Master ingredient reference (for autocomplete and defaults)
CREATE TABLE ingredients_master (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT UNIQUE NOT NULL,
  aliases TEXT[], -- ['cilantro', 'coriander', 'Chinese parsley']
  category_id UUID REFERENCES ingredient_categories(id),
  typical_unit TEXT, -- 'grams', 'ml', 'pieces', 'bunch'
  avg_expiration_days JSONB, -- {"refrigerated": 7, "frozen": 90, "room_temp": 3}
  avg_price_per_unit NUMERIC, -- For cost tracking
  nutrition_data JSONB, -- Calories, protein, etc per 100g
  barcode TEXT, -- For packaged goods
  image_url TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE inventory_items (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  ingredient_id UUID REFERENCES ingredients_master(id),
  custom_name TEXT, -- If not in master list
  quantity NUMERIC DEFAULT 1,
  unit TEXT,
  storage_location_id UUID REFERENCES storage_locations(id),
  purchase_date DATE DEFAULT CURRENT_DATE,
  expiration_date DATE,
  expiration_confidence NUMERIC, -- 0-1 score for auto-estimated dates
  purchase_price NUMERIC,
  notes TEXT,
  image_url TEXT,
  added_by_user_id UUID REFERENCES users(id),
  is_opened BOOLEAN DEFAULT false,
  opened_date DATE,
  barcode TEXT,
  brand TEXT,
  
  -- Computed fields
  is_expired BOOLEAN GENERATED ALWAYS AS (expiration_date < CURRENT_DATE) STORED,
  days_until_expiry INTEGER GENERATED ALWAYS AS (expiration_date - CURRENT_DATE) STORED,
  urgency_level TEXT GENERATED ALWAYS AS (
    CASE 
      WHEN expiration_date - CURRENT_DATE < 0 THEN 'expired'
      WHEN expiration_date - CURRENT_DATE <= 1 THEN 'critical'
      WHEN expiration_date - CURRENT_DATE <= 3 THEN 'urgent'
      WHEN expiration_date - CURRENT_DATE <= 7 THEN 'soon'
      ELSE 'good'
    END
  ) STORED,
  
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_inventory_household ON inventory_items(household_id);
CREATE INDEX idx_inventory_expiration ON inventory_items(expiration_date);
CREATE INDEX idx_inventory_urgency ON inventory_items(urgency_level);

-- Track when ingredients are used
CREATE TABLE inventory_usage (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  inventory_item_id UUID REFERENCES inventory_items(id) ON DELETE CASCADE,
  quantity_used NUMERIC NOT NULL,
  used_by_user_id UUID REFERENCES users(id),
  recipe_id UUID, -- References saved_recipes (defined below)
  used_date TIMESTAMP DEFAULT NOW(),
  notes TEXT
);

-- Expiration history for learning
CREATE TABLE expiration_feedback (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  ingredient_id UUID REFERENCES ingredients_master(id),
  user_id UUID REFERENCES users(id),
  predicted_expiration DATE,
  actual_expiration DATE,
  storage_type TEXT,
  was_accurate BOOLEAN,
  created_at TIMESTAMP DEFAULT NOW()
);

-- ============================================
-- RECIPES
-- ============================================

CREATE TABLE recipe_sources (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL, -- 'AllRecipes', 'Food Network', etc.
  url TEXT,
  logo_url TEXT,
  is_active BOOLEAN DEFAULT true
);

CREATE TABLE recipes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  source_id UUID REFERENCES recipe_sources(id),
  source_recipe_id TEXT, -- ID from source website
  url TEXT UNIQUE,
  title TEXT NOT NULL,
  description TEXT,
  prep_time_minutes INTEGER,
  cook_time_minutes INTEGER,
  total_time_minutes INTEGER,
  servings INTEGER,
  difficulty TEXT, -- beginner, intermediate, advanced
  cuisine TEXT, -- Italian, Mexican, etc.
  meal_type TEXT[], -- ['dinner', 'main_course']
  cooking_methods TEXT[], -- ['baking', 'stovetop']
  dietary_tags TEXT[], -- ['vegetarian', 'gluten-free']
  instructions JSONB, -- Array of step objects
  nutrition JSONB, -- Calories, protein, etc per serving
  main_image_url TEXT,
  images JSONB, -- Array of additional image URLs
  video_url TEXT,
  rating_avg NUMERIC DEFAULT 0,
  rating_count INTEGER DEFAULT 0,
  view_count INTEGER DEFAULT 0,
  cook_count INTEGER DEFAULT 0,
  save_count INTEGER DEFAULT 0,
  language TEXT DEFAULT 'en',
  is_user_generated BOOLEAN DEFAULT false,
  created_by_user_id UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  last_scraped_at TIMESTAMP
);

CREATE INDEX idx_recipes_cuisine ON recipes(cuisine);
CREATE INDEX idx_recipes_meal_type ON recipes USING GIN(meal_type);
CREATE INDEX idx_recipes_dietary ON recipes USING GIN(dietary_tags);
CREATE INDEX idx_recipes_rating ON recipes(rating_avg DESC);
CREATE INDEX idx_recipes_search ON recipes USING GIN(to_tsvector('english', title || ' ' || description));

CREATE TABLE recipe_ingredients (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  recipe_id UUID REFERENCES recipes(id) ON DELETE CASCADE,
  ingredient_id UUID REFERENCES ingredients_master(id),
  custom_ingredient_name TEXT, -- If not in master
  quantity NUMERIC,
  unit TEXT,
  preparation TEXT, -- 'diced', 'minced', 'cooked'
  is_optional BOOLEAN DEFAULT false,
  ingredient_group TEXT, -- 'For the sauce', 'For topping'
  sort_order INTEGER DEFAULT 0
);

CREATE INDEX idx_recipe_ingredients ON recipe_ingredients(recipe_id, ingredient_id);

-- User interaction with recipes
CREATE TABLE saved_recipes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  recipe_id UUID REFERENCES recipes(id) ON DELETE CASCADE,
  collection_name TEXT, -- Custom collections/boards
  notes TEXT,
  saved_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(user_id, recipe_id)
);

CREATE TABLE cooked_recipes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  recipe_id UUID REFERENCES recipes(id) ON DELETE CASCADE,
  household_id UUID REFERENCES households(id),
  cooked_date DATE DEFAULT CURRENT_DATE,
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),
  review TEXT,
  modifications TEXT,
  would_make_again BOOLEAN,
  prep_time_actual INTEGER,
  cook_time_actual INTEGER,
  ingredients_used JSONB, -- Array of inventory_item IDs used
  photos JSONB, -- User's photos of their cooked dish
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_cooked_recipes_user ON cooked_recipes(user_id, cooked_date);

-- Recipe matching scores (cached for performance)
CREATE TABLE recipe_matches (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  recipe_id UUID REFERENCES recipes(id) ON DELETE CASCADE,
  match_score NUMERIC, -- 0-100
  ingredients_have INTEGER,
  ingredients_total INTEGER,
  ingredients_missing TEXT[], -- IDs of missing ingredients
  urgency_score NUMERIC, -- Based on expiring ingredients
  calculated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(household_id, recipe_id)
);

CREATE INDEX idx_recipe_matches ON recipe_matches(household_id, match_score DESC);

-- ============================================
-- MEAL PLANNING
-- ============================================

CREATE TABLE meal_plans (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  name TEXT,
  week_start_date DATE NOT NULL,
  week_end_date DATE NOT NULL,
  is_active BOOLEAN DEFAULT true,
  auto_generated BOOLEAN DEFAULT false,
  created_by_user_id UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE meal_plan_items (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  meal_plan_id UUID REFERENCES meal_plans(id) ON DELETE CASCADE,
  recipe_id UUID REFERENCES recipes(id),
  scheduled_date DATE NOT NULL,
  meal_type TEXT NOT NULL, -- breakfast, lunch, dinner, snack
  servings INTEGER DEFAULT 4,
  assigned_to_user_id UUID REFERENCES users(id), -- Who's cooking
  prep_notes TEXT,
  status TEXT DEFAULT 'planned', -- planned, prepped, cooked, skipped
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_meal_plan_items ON meal_plan_items(meal_plan_id, scheduled_date);

-- ============================================
-- SHOPPING LISTS
-- ============================================

CREATE TABLE shopping_lists (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  name TEXT DEFAULT 'Main Shopping List',
  is_default BOOLEAN DEFAULT false,
  store_name TEXT,
  estimated_total NUMERIC,
  created_by_user_id UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE shopping_list_items (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  shopping_list_id UUID REFERENCES shopping_lists(id) ON DELETE CASCADE,
  ingredient_id UUID REFERENCES ingredients_master(id),
  custom_name TEXT,
  quantity NUMERIC,
  unit TEXT,
  estimated_price NUMERIC,
  category TEXT, -- For grouping in store
  is_checked BOOLEAN DEFAULT false,
  checked_by_user_id UUID REFERENCES users(id),
  checked_at TIMESTAMP,
  notes TEXT,
  source TEXT, -- 'manual', 'recipe', 'meal_plan', 'auto_suggest'
  source_recipe_id UUID REFERENCES recipes(id),
  priority INTEGER DEFAULT 0, -- Higher = more urgent
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_shopping_list_items ON shopping_list_items(shopping_list_id, is_checked);

-- ============================================
-- ANALYTICS & INSIGHTS
-- ============================================

CREATE TABLE waste_events (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  inventory_item_id UUID REFERENCES inventory_items(id),
  ingredient_name TEXT,
  quantity NUMERIC,
  unit TEXT,
  reason TEXT, -- 'expired', 'spoiled', 'forgot', 'too_much'
  estimated_value NUMERIC,
  reported_by_user_id UUID REFERENCES users(id),
  waste_date DATE DEFAULT CURRENT_DATE,
  could_have_prevented BOOLEAN,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE waste_prevention_stats (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  month DATE NOT NULL, -- First day of month
  items_saved INTEGER DEFAULT 0,
  items_wasted INTEGER DEFAULT 0,
  value_saved NUMERIC DEFAULT 0,
  value_wasted NUMERIC DEFAULT 0,
  co2_prevented_kg NUMERIC DEFAULT 0, -- Environmental impact
  recipes_cooked INTEGER DEFAULT 0,
  top_saved_ingredients JSONB,
  top_wasted_ingredients JSONB,
  calculated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(household_id, month)
);

CREATE TABLE user_cooking_stats (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  month DATE NOT NULL,
  recipes_cooked INTEGER DEFAULT 0,
  favorite_cuisine TEXT,
  avg_prep_time INTEGER,
  cuisines_tried TEXT[],
  achievements JSONB, -- Badges earned
  cooking_streak INTEGER DEFAULT 0, -- Consecutive days
  calculated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(user_id, month)
);

-- ============================================
-- NOTIFICATIONS & ALERTS
-- ============================================

CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  type TEXT NOT NULL, -- 'expiration', 'recipe_suggestion', 'achievement', 'social'
  title TEXT NOT NULL,
  message TEXT,
  action_url TEXT,
  related_entity_type TEXT, -- 'inventory_item', 'recipe', etc.
  related_entity_id UUID,
  priority TEXT DEFAULT 'normal', -- low, normal, high, urgent
  is_read BOOLEAN DEFAULT false,
  read_at TIMESTAMP,
  sent_via_push BOOLEAN DEFAULT false,
  sent_via_email BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_notifications_user ON notifications(user_id, is_read, created_at DESC);

CREATE TABLE notification_schedules (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  household_id UUID REFERENCES households(id) ON DELETE CASCADE,
  notification_type TEXT NOT NULL, -- 'daily_expiry', 'weekly_waste_report', 'meal_reminder'
  schedule_time TIME, -- Time of day to send
  schedule_days INTEGER[], -- Days of week (0-6, Sunday=0)
  is_active BOOLEAN DEFAULT true,
  last_sent_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW()
);

-- ============================================
-- SOCIAL & COMMUNITY
-- ============================================

CREATE TABLE user_follows (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  follower_user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  following_user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  followed_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(follower_user_id, following_user_id),
  CHECK (follower_user_id != following_user_id)
);

CREATE TABLE recipe_comments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  recipe_id UUID REFERENCES recipes(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  parent_comment_id UUID REFERENCES recipe_comments(id),
  comment_text TEXT NOT NULL,
  helpful_count INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_recipe_comments ON recipe_comments(recipe_id, created_at DESC);

CREATE TABLE recipe_collections (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  is_public BOOLEAN DEFAULT false,
  cover_image_url TEXT,
  recipe_count INTEGER DEFAULT 0,
  follower_count INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE collection_recipes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  collection_id UUID REFERENCES recipe_collections(id) ON DELETE CASCADE,
  recipe_id UUID REFERENCES recipes(id) ON DELETE CASCADE,
  notes TEXT,
  sort_order INTEGER DEFAULT 0,
  added_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(collection_id, recipe_id)
);

CREATE TABLE cooking_challenges (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  challenge_type TEXT, -- 'zero_waste_week', 'budget_challenge', 'ingredient_challenge'
  start_date DATE,
  end_date DATE,
  rules JSONB,
  prize_description TEXT,
  participant_count INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_by_user_id UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE challenge_participants (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  challenge_id UUID REFERENCES cooking_challenges(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  joined_at TIMESTAMP DEFAULT NOW(),
  progress_data JSONB, -- Challenge-specific progress tracking
  completion_status TEXT DEFAULT 'in_progress', -- in_progress, completed, abandoned
  final_score NUMERIC,
  rank INTEGER,
  UNIQUE(challenge_id, user_id)
);

-- ============================================
-- AI & MACHINE LEARNING DATA
-- ============================================

CREATE TABLE ai_scan_history (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  household_id UUID REFERENCES households(id),
  image_url TEXT NOT NULL,
  scan_type TEXT, -- 'bulk', 'single', 'barcode'
  ai_response JSONB, -- Raw AI output
  ingredients_detected JSONB, -- Parsed ingredients
  confidence_scores JSONB,
  user_corrections JSONB, -- What user changed
  scan_duration_ms INTEGER,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE ingredient_substitutions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  original_ingredient_id UUID REFERENCES ingredients_master(id),
  substitute_ingredient_id UUID REFERENCES ingredients_master(id),
  substitution_ratio NUMERIC DEFAULT 1, -- How much substitute per original
  context TEXT, -- 'baking', 'cooking', 'any'
  quality_score NUMERIC, -- How good the substitution is (0-1)
  notes TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Learning from user behavior
CREATE TABLE user_behavior_patterns (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  pattern_type TEXT, -- 'favorite_cuisine', 'cooking_frequency', 'waste_tendency'
  pattern_data JSONB,
  confidence NUMERIC, -- 0-1 score
  last_updated TIMESTAMP DEFAULT NOW()
);

-- ============================================
-- ADMIN & MODERATION
-- ============================================

CREATE TABLE admin_users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) UNIQUE,
  role TEXT NOT NULL, -- 'super_admin', 'moderator', 'support'
  permissions JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE content_reports (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  reported_by_user_id UUID REFERENCES users(id),
  content_type TEXT, -- 'recipe', 'comment', 'user'
  content_id UUID,
  reason TEXT,
  description TEXT,
  status TEXT DEFAULT 'pending', -- pending, reviewing, resolved, dismissed
  reviewed_by_admin_id UUID REFERENCES admin_users(id),
  resolution_notes TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  resolved_at TIMESTAMP
);

CREATE TABLE system_logs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  event_type TEXT, -- 'error', 'warning', 'info', 'security'
  user_id UUID REFERENCES users(id),
  message TEXT,
  metadata JSONB,
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- ============================================
-- SUBSCRIPTION & BILLING
-- ============================================

CREATE TABLE subscriptions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  tier TEXT NOT NULL, -- 'free', 'pro', 'family'
  status TEXT NOT NULL, -- 'active', 'cancelled', 'expired', 'past_due'
  stripe_customer_id TEXT,
  stripe_subscription_id TEXT,
  current_period_start TIMESTAMP,
  current_period_end TIMESTAMP,
  cancel_at_period_end BOOLEAN DEFAULT false,
  cancelled_at TIMESTAMP,
  trial_end TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE payment_history (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  subscription_id UUID REFERENCES subscriptions(id),
  amount NUMERIC NOT NULL,
  currency TEXT DEFAULT 'USD',
  status TEXT, -- 'succeeded', 'failed', 'refunded'
  stripe_payment_intent_id TEXT,
  payment_date TIMESTAMP DEFAULT NOW(),
  description TEXT
);

-- ============================================
-- API USAGE TRACKING (for rate limiting)
-- ============================================

CREATE TABLE api_usage (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id),
  endpoint TEXT,
  request_count INTEGER DEFAULT 1,
  date DATE DEFAULT CURRENT_DATE,
  created_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(user_id, endpoint, date)
);

-- ============================================
-- FUNCTIONS & TRIGGERS
-- ============================================

-- Auto-update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$ LANGUAGE plpgsql;

-- Apply to all tables with updated_at
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_inventory_items_updated_at BEFORE UPDATE ON inventory_items
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_recipes_updated_at BEFORE UPDATE ON recipes
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Add more triggers for other tables...

-- Function to calculate recipe match scores
CREATE OR REPLACE FUNCTION calculate_recipe_match_score(
  p_household_id UUID,
  p_recipe_id UUID
) RETURNS NUMERIC AS $
DECLARE
  v_total_ingredients INTEGER;
  v_have_ingredients INTEGER;
  v_match_percentage NUMERIC;
  v_urgency_score NUMERIC := 0;
BEGIN
  -- Count total ingredients in recipe
  SELECT COUNT(*) INTO v_total_ingredients
  FROM recipe_ingredients
  WHERE recipe_id = p_recipe_id;
  
  -- Count how many ingredients household has
  SELECT COUNT(DISTINCT ri.ingredient_id) INTO v_have_ingredients
  FROM recipe_ingredients ri
  JOIN inventory_items ii ON ri.ingredient_id = ii.ingredient_id
  WHERE ri.recipe_id = p_recipe_id
    AND ii.household_id = p_household_id
    AND ii.is_expired = false;
  
  -- Calculate base match percentage
  IF v_total_ingredients > 0 THEN
    v_match_percentage := (v_have_ingredients::NUMERIC / v_total_ingredients) * 100;
  ELSE
    v_match_percentage := 0;
  END IF;
  
  -- Calculate urgency bonus (recipes using expiring ingredients get boost)
  SELECT AVG(
    CASE 
      WHEN ii.days_until_expiry <= 1 THEN 30
      WHEN ii.days_until_expiry <= 3 THEN 20
      WHEN ii.days_until_expiry <= 7 THEN 10
      ELSE 0
    END
  ) INTO v_urgency_score
  FROM recipe_ingredients ri
  JOIN inventory_items ii ON ri.ingredient_id = ii.ingredient_id
  WHERE ri.recipe_id = p_recipe_id
    AND ii.household_id = p_household_id
    AND ii.is_expired = false;
  
  -- Return combined score
  RETURN v_match_percentage + COALESCE(v_urgency_score, 0);
END;
$ LANGUAGE plpgsql;

-- ============================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ============================================

-- Enable RLS on all tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE households ENABLE ROW LEVEL SECURITY;
ALTER TABLE inventory_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE recipes ENABLE ROW LEVEL SECURITY;
-- ... enable for all tables

-- Example policies for inventory_items
CREATE POLICY "Users can view their household's inventory"
  ON inventory_items FOR SELECT
  USING (
    household_id IN (
      SELECT household_id FROM household_members
      WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert into their household's inventory"
  ON inventory_items FOR INSERT
  WITH CHECK (
    household_id IN (
      SELECT household_id FROM household_members
      WHERE user_id = auth.uid()
      AND role IN ('admin', 'editor')
    )
  );

-- Similar policies for all tables...

-- ============================================
-- INDEXES FOR PERFORMANCE
-- ============================================

CREATE INDEX idx_inventory_household_expiry ON inventory_items(household_id, expiration_date);
CREATE INDEX idx_recipes_ingredients ON recipe_ingredients(recipe_id, ingredient_id);
CREATE INDEX idx_cooked_recipes_date ON cooked_recipes(user_id, cooked_date DESC);
CREATE INDEX idx_waste_events_household ON waste_events(household_id, waste_date DESC);
CREATE INDEX idx_shopping_list_unchecked ON shopping_list_items(shopping_list_id) WHERE is_checked = false;
CREATE INDEX idx_notifications_unread ON notifications(user_id, created_at DESC) WHERE is_read = false;

-- Full-text search indexes
CREATE INDEX idx_ingredients_search ON ingredients_master USING GIN(to_tsvector('english', name || ' ' || COALESCE(array_to_string(aliases, ' '), '')));
CREATE INDEX idx_recipes_fulltext ON recipes USING GIN(to_tsvector('english', title || ' ' || COALESCE(description, '')));
```

---

## üîß API Architecture

### REST API Endpoints

```javascript
// ============================================
// AUTH ENDPOINTS
// ============================================
POST   /api/auth/signup
POST   /api/auth/login
POST   /api/auth/logout
POST   /api/auth/refresh-token
POST   /api/auth/forgot-password
POST   /api/auth/reset-password
GET    /api/auth/me
PATCH  /api/auth/me
POST   /api/auth/verify-email

// ============================================
// HOUSEHOLD MANAGEMENT
// ============================================
GET    /api/households
POST   /api/households
GET    /api/households/:id
PATCH  /api/households/:id
DELETE /api/households/:id
POST   /api/households/:id/invite
POST   /api/households/join/:inviteCode
GET    /api/households/:id/members
DELETE /api/households/:id/members/:userId
PATCH  /api/households/:id/members/:userId/role

// ============================================
// INVENTORY ENDPOINTS
// ============================================
GET    /api/inventory                        # Get household inventory
POST   /api/inventory                        # Add item manually
POST   /api/inventory/bulk                   # Add multiple items
GET    /api/inventory/:id
PATCH  /api/inventory/:id                    # Update item
DELETE /api/inventory/:id
POST   /api/inventory/:id/use                # Mark as used (partial/full)
POST   /api/inventory/scan/photo             # AI photo recognition
POST   /api/inventory/scan/barcode           # Barcode scan
POST   /api/inventory/scan/voice             # Voice input parsing
GET    /api/inventory/expiring               # Items expiring soon
GET    /api/inventory/expired                # Expired items
GET    /api/inventory/stats                  # Inventory statistics

// ============================================
// RECIPE ENDPOINTS
// ============================================
GET    /api/recipes                          # Search recipes
GET    /api/recipes/:id
POST   /api/recipes                          # Create user recipe
PATCH  /api/recipes/:id
DELETE /api/recipes/:id
GET    /api/recipes/recommended              # Personalized recommendations
GET    /api/recipes/can-make-now             # Recipes with current inventory
GET    /api/recipes/missing-few              # Missing 1-2 ingredients
POST   /api/recipes/:id/save                 # Save to favorites
DELETE /api/recipes/:id/save
POST   /api/recipes/:id/cook                 # Mark as cooked
POST   /api/recipes/:id/rate                 # Rate recipe
GET    /api/recipes/:id/comments
POST   /api/recipes/:id/comments
POST   /api/recipes/import                   # Import from URL
GET    /api/recipes/trending
GET    /api/recipes/popular

// Recipe Search Query Parameters:
// ?ingredients=chicken,rice,onion
// ?dietary=vegetarian,gluten-free
// ?cuisine=italian,mexican
// ?maxTime=30
// ?difficulty=beginner
// ?mealType=dinner
// ?sortBy=match_score|rating|popularity|newest

// ============================================
// MEAL PLANNING
// ============================================
GET    /api/meal-plans
POST   /api/meal-plans                       # Create meal plan
GET    /api/meal-plans/:id
PATCH  /api/meal-plans/:id
DELETE /api/meal-plans/:id
POST   /api/meal-plans/auto-generate         # AI-generated meal plan
GET    /api/meal-plans/current               # This week's plan
POST   /api/meal-plans/:id/items
PATCH  /api/meal-plans/:id/items/:itemId
DELETE /api/meal-plans/:id/items/:itemId
POST   /api/meal-plans/:id/generate-shopping-list

// ============================================
// SHOPPING LIST
// ============================================
GET    /api/shopping-lists
POST   /api/shopping-lists
GET    /api/shopping-lists/:id
PATCH  /api/shopping-lists/:id
DELETE /api/shopping-lists/:id
POST   /api/shopping-lists/:id/items
PATCH  /api/shopping-lists/:id/items/:itemId
DELETE /api/shopping-lists/:id/items/:itemId
POST   /api/shopping-lists/:id/items/:itemId/check
POST   /api/shopping-lists/:id/items/:itemId/uncheck
POST   /api/shopping-lists/:id/clear-checked
POST   /api/shopping-lists/:id/export         # Export for delivery services

// ============================================
// ANALYTICS & INSIGHTS
// ============================================
GET    /api/analytics/waste                  # Waste statistics
GET    /api/analytics/savings                # Money saved
GET    /api/analytics/environmental          # CO2 impact
GET    /api/analytics/cooking-stats          # Personal cooking data
GET    /api/analytics/trends                 # Usage patterns
POST   /api/analytics/waste-event            # Report wasted food

// ============================================
// AI & SMART FEATURES
// ============================================
POST   /api/ai/analyze-image                 # Gemini vision analysis
POST   /api/ai/parse-voice                   # Voice command parsing
POST   /api/ai/suggest-recipes               # Personalized suggestions
POST   /api/ai/smart-substitutions           # Ingredient alternatives
POST   /api/ai/optimize-meal-plan            # Optimize existing plan
GET    /api/ai/insights                      # AI-generated insights

// ============================================
// SOCIAL & COMMUNITY
// ============================================
POST   /api/users/:id/follow
DELETE /api/users/:id/unfollow
GET    /api/users/:id/followers
GET    /api/users/:id/following
GET    /api/collections                      # Recipe collections
POST   /api/collections
GET    /api/collections/:id
PATCH  /api/collections/:id
DELETE /api/collections/:id
POST   /api/collections/:id/recipes/:recipeId
DELETE /api/collections/:id/recipes/:recipeId
GET    /api/challenges                       # Cooking challenges
POST   /api/challenges/:id/join
GET    /api/challenges/:id/leaderboard
POST   /api/recipes/:id/comments/:commentId/helpful

// ============================================
// NOTIFICATIONS
// ============================================
GET    /api/notifications
PATCH  /api/notifications/:id/read
PATCH  /api/notifications/read-all
DELETE /api/notifications/:id
GET    /api/notifications/preferences
PATCH  /api/notifications/preferences

// ============================================
// SUBSCRIPTIONS
// ============================================
GET    /api/subscription
POST   /api/subscription/create-checkout     # Stripe checkout
POST   /api/subscription/cancel
POST   /api/subscription/resume
PATCH  /api/subscription/upgrade
GET    /api/subscription/invoices
POST   /api/subscription/update-payment

// ============================================
// ADMIN ENDPOINTS
// ============================================
GET    /api/admin/users
GET    /api/admin/statistics
GET    /api/admin/reports
POST   /api/admin/moderate-content
GET    /api/admin/scrape-recipes             # Trigger recipe scraping
```

---

## ü§ñ AI Integration Details

### Gemini Vision API Integration

```javascript
// services/geminiService.js

class GeminiVisionService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.model = 'gemini-pro-vision';
  }

  async analyzeIngredients(imageBase64, options = {}) {
    const prompt = this.buildPrompt(options);
    
    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1/models/${this.model}:generateContent`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-goog-api-key': this.apiKey
          },
          body: JSON.stringify({
            contents: [{
              parts: [
                { text: prompt },
                {
                  inline_data: {
                    mime_type: 'image/jpeg',
                    data: imageBase64
                  }
                }
              ]
            }],
            generationConfig: {
              temperature: 0.2, // Low temperature for accuracy
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 2048,
            }
          })
        }
      );

      const data = await response.json();
      return this.parseGeminiResponse(data);
      
    } catch (error) {
      console.error('Gemini API Error:', error);
      throw new Error('Failed to analyze image');
    }
  }

  buildPrompt(options) {
    return `Analyze this image and identify all food ingredients visible.

Instructions:
1. List each ingredient separately
2. Estimate quantities if visible (e.g., "3 apples", "1 bunch of cilantro")
3. Identify storage state (fresh, wilting, packaged, opened)
4. Note any visible expiration dates or "best by" labels
5. Categorize each item (produce, meat, dairy, grain, etc.)

Return ONLY valid JSON in this exact format:
{
  "ingredients": [
    {
      "name": "ingredient name",
      "quantity": number or null,
      "unit": "pieces|bunch|grams|ml|package" or null,
      "category": "produce|meat|dairy|grain|condiment|spice|other",
      "condition": "fresh|good|wilting|opened|unopened",
      "confidence": 0.0-1.0,
      "visible_expiration": "date string" or null,
      "notes": "any additional context"
    }
  ],
  "overall_confidence": 0.0-1.0,
  "image_quality": "excellent|good|fair|poor",
  "recommendations": "any suggestions for better scanning"
}

Focus on accuracy. If unsure about an item, mark confidence as low.`;
  }

  parseGeminiResponse(data) {
    try {
      const text = data.candidates[0].content.parts[0].text;
      
      // Extract JSON from markdown code blocks if present
      const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || 
                       text.match(/{[\s\S]*}/);
      
      if (!jsonMatch) {
        throw new Error('No valid JSON found in response');
      }

      const parsed = JSON.parse(jsonMatch[1] || jsonMatch[0]);
      
      // Validate and sanitize response
      return this.validateAndEnhance(parsed);
      
    } catch (error) {
      console.error('Failed to parse Gemini response:', error);
      throw new Error('Invalid AI response format');
    }
  }

  validateAndEnhance(parsed) {
    if (!parsed.ingredients || !Array.isArray(parsed.ingredients)) {
      throw new Error('Invalid ingredients array');
    }

    return {
      ingredients: parsed.ingredients.map(ing => ({
        name: this.normalizeIngredientName(ing.name),
        quantity: ing.quantity || null,
        unit: ing.unit || null,
        category: ing.category || 'other',
        condition: ing.condition || 'good',
        confidence: Math.min(Math.max(ing.confidence || 0.7, 0), 1),
        visible_expiration: ing.visible_expiration || null,
        notes: ing.notes || null,
        // Add estimated expiration if not visible
        estimated_expiration_days: this.estimateExpiration(
          ing.name,
          ing.category,
          ing.condition
        )
      })),
      overall_confidence: parsed.overall_confidence || 0.7,
      image_quality: parsed.image_quality || 'good',
      recommendations: parsed.recommendations || null,
      processed_at: new Date().toISOString()
    };
  }

  normalizeIngredientName(name) {
    // Convert to lowercase, remove extra spaces
    return name.toLowerCase().trim().replace(/\s+/g, ' ');
  }

  estimateExpiration(name, category, condition) {
    const expirationMap = {
      produce: { fresh: 7, good: 5, wilting: 2 },
      meat: { fresh: 3, good: 2, wilting: 1 },
      dairy: { unopened: 14, opened: 7, good: 5 },
      grain: { unopened: 180, opened: 90, good: 60 },
      // Add more categories
    };

    const categoryData = expirationMap[category] || { fresh: 7, good: 5 };
    return categoryData[condition] || categoryData.good || 7;
  }

  // Batch processing for multiple images
  async analyzeBatch(images) {
    const results = await Promise.allSettled(
      images.map(img => this.analyzeIngredients(img))
    );

    return {
      successful: results.filter(r => r.status === 'fulfilled').map(r => r.value),
      failed: results.filter(r => r.status === 'rejected').map(r => r.reason),
      total: images.length
    };
  }
}

export default new GeminiVisionService();
```

### Supercook API Integration

```javascript
// services/supercookService.js

class SupercookService {
  constructor() {
    this.baseURL = process.env.SUPERCOOK_API_URL;
    this.apiKey = process.env.SUPERCOOK_API_KEY;
  }

  async searchRecipes(params) {
    const {
      ingredients = [],
      exclude_ingredients = [],
      dietary_filters = [],
      cuisine = null,
      max_time = null,
      difficulty = null,
      meal_type = null,
      limit = 50,
      offset = 0
    } = params;

    try {
      const response = await fetch(`${this.baseURL}/search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          ingredients,
          exclude: exclude_ingredients,
          diet: dietary_filters,
          cuisine,
          maxTime: max_time,
          difficulty,
          mealType: meal_type,
          limit,
          offset
        })
      });

      const data = await response.json();
      return this.enhanceRecipeResults(data.recipes, ingredients);
      
    } catch (error) {
      console.error('Supercook API Error:', error);
      throw new Error('Failed to fetch recipes');
    }
  }

  enhanceRecipeResults(recipes, userIngredients) {
    return recipes.map(recipe => {
      const matchData = this.calculateMatch(recipe.ingredients, userIngredients);
      
      return {
        ...recipe,
        match_percentage: matchData.percentage,
        ingredients_have: matchData.have,
        ingredients_missing: matchData.missing,
        missing_count: matchData.missing.length,
        can_make_now: matchData.missing.length === 0,
        priority_score: this.calculatePriorityScore(recipe, matchData)
      };
    });
  }

  calculateMatch(recipeIngredients, userIngredients) {
    const normalized = userIngredients.map(i => i.toLowerCase().trim());
    
    const have = recipeIngredients.filter(ri => 
      normalized.some(ui => 
        ri.toLowerCase().includes(ui) || ui.includes(ri.toLowerCase())
      )
    );
    
    const missing = recipeIngredients.filter(ri => !have.includes(ri));
    
    return {
      have,
      missing,
      percentage: (have.length / recipeIngredients.length) * 100
    };
  }

  calculatePriorityScore(recipe, matchData) {
    let score = 0;
    
    // Match percentage (40 points)
    score += matchData.percentage * 0.4;
    
    // Recipe rating (30 points)
    score += (recipe.rating || 0) * 6; // Assuming 5-star scale
    
    // Preparation time (20 points - faster = better)
    const timeScore = Math.max(0, 20 - (recipe.totalTime / 5));
    score += timeScore;
    
    // Popularity (10 points)
    const popularityScore = Math.min(10, (recipe.views || 0) / 1000);
    score += popularityScore;
    
    return Math.round(score);
  }

  async getRecipeDetails(recipeId) {
    try {
      const response = await fetch(`${this.baseURL}/recipes/${recipeId}`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`
        }
      });
      
      return await response.json();
    } catch (error) {
      console.error('Failed to fetch recipe details:', error);
      throw error;
    }
  }

  async scrapeRecipeFromURL(url) {
    try {
      const response = await fetch(`${this.baseURL}/scrape`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({ url })
      });
      
      return await response.json();
    } catch (error) {
      console.error('Failed to scrape recipe:', error);
      throw error;
    }
  }
}

export default new SupercookService();
```

---

## üì± Frontend Architecture

### Component Structure (Detailed)

```
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx                    # Root layout
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx                      # Landing page
‚îÇ   ‚îú‚îÄ‚îÄ (auth)/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ signup/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ forgot-password/
‚îÇ   ‚îú‚îÄ‚îÄ (dashboard)/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx                # Dashboard layout with sidebar
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx                  # Dashboard home
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ inventory/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx              # Inventory list
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ add/page.tsx          # Add items
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ scan/page.tsx         # Camera scan
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [id]/page.tsx         # Item details
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ recipes/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx              # Recipe search
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [id]/page.tsx         # Recipe details
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ create/page.tsx       # Create recipe
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ saved/page.tsx        # Saved recipes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ meal-plan/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx              # Meal calendar
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ create/page.tsx       # Create plan
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ shopping/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx              # Shopping lists
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ analytics/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx              # Waste analytics
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ community/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx              # Community feed
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ challenges/page.tsx   # Cooking challenges
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ collections/page.tsx  # Recipe collections
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ settings/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ page.tsx              # Account settings
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ household/page.tsx    # Household management
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ subscription/page.tsx # Billing
‚îÇ   ‚îî‚îÄ‚îÄ api/                          # API routes (if using Next.js)
‚îÇ
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/                           # shadcn components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ button.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ card.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dialog.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dropdown-menu.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ input.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ calendar.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îú‚îÄ‚îÄ layout/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Navbar.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Sidebar.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MobileNav.tsx
‚îÇ   ‚îú‚îÄ‚îÄ inventory/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InventoryList.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InventoryCard.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InventoryFilters.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ExpirationBadge.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StorageLocationPicker.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CameraCapture.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ImagePreview.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BarcodeScanner.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ VoiceInput.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IngredientAutocomplete.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ BulkActions.tsx
‚îÇ   ‚îú‚îÄ‚îÄ recipes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecipeSearch.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecipeGrid.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecipeCard.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecipeDetails.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecipeFilters.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IngredientMatchIndicator.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecipeRating.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecipeComments.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecipeImporter.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ RecipeCreator.tsx
‚îÇ   ‚îú‚îÄ‚îÄ meal-plan/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MealCalendar.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MealPlanCard.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MealPlanGenerator.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ DragDropMeal.tsx
‚îÇ   ‚îú‚îÄ‚îÄ shopping/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ShoppingList.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ShoppingListItem.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CategoryGrouping.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ StoreIntegration.tsx
‚îÇ   ‚îú‚îÄ‚îÄ analytics/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ WasteDashboard.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SavingsChart.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EnvironmentalImpact.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CookingStats.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ TrendAnalysis.tsx
‚îÇ   ‚îú‚îÄ‚îÄ community/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ActivityFeed.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UserProfile.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChallengeCard.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Leaderboard.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CollectionGrid.tsx
‚îÇ   ‚îî‚îÄ‚îÄ common/
‚îÇ       ‚îú‚îÄ‚îÄ LoadingSpinner.tsx
‚îÇ       ‚îú‚îÄ‚îÄ ErrorBoundary.tsx
‚îÇ       ‚îú‚îÄ‚îÄ EmptyState.tsx
‚îÇ       ‚îú‚îÄ‚îÄ ConfirmDialog.tsx
‚îÇ       ‚îú‚îÄ‚îÄ NotificationToast.tsx
‚îÇ       ‚îî‚îÄ‚îÄ ImageUploader.tsx
‚îÇ
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îú‚îÄ‚îÄ api/                          # API client functions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ inventory.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ recipes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mealPlan.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ analytics.ts
‚îÇ   ‚îú‚îÄ‚îÄ hooks/                        # Custom React hooks
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useInventory.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useRecipes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useCamera.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useVoiceInput.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useLocalStorage.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useDebounce.ts
‚îÇ   ‚îú‚îÄ‚îÄ stores/                       # Zustand stores
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authStore.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ inventoryStore.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ recipeStore.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ uiStore.ts
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dateHelpers.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ imageCompression.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ expirationCalculator.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ nutritionCalculator.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ costCalculator.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validators.ts
‚îÇ   ‚îú‚îÄ‚îÄ constants/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dietary.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cuisines.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ categories.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ units.ts
‚îÇ   ‚îî‚îÄ‚îÄ types/
‚îÇ       ‚îú‚îÄ‚îÄ inventory.ts
‚îÇ       ‚îú‚îÄ‚îÄ recipe.ts
‚îÇ       ‚îú‚îÄ‚îÄ user.ts
‚îÇ       ‚îî‚îÄ‚îÄ api.ts
‚îÇ
‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îî‚îÄ‚îÄ globals.css
‚îÇ
‚îî‚îÄ‚îÄ public/
    ‚îú‚îÄ‚îÄ icons/
    ‚îú‚îÄ‚îÄ images/
    ‚îî‚îÄ‚îÄ manifest.json
```

---

## üöÄ Development Roadmap

### **Phase 1: Foundation (Weeks 1-8)**

#### Week 1-2: Setup & Core Infrastructure
- [ ] Initialize monorepo (Turborepo or Nx)
- [ ] Setup development environment
- [ ] Configure Supabase project
- [ ] Run database migrations
- [ ] Setup authentication flow
- [ ] Create basic UI layouts
- [ ] Implement routing

#### Week 3-4: Inventory Management MVP
- [ ] Manual ingredient entry with autocomplete
- [ ] Storage location management
- [ ] Basic expiration date tracking
- [ ] Inventory list view with filters
- [ ] CRUD operations for inventory items
- [ ] Local storage for offline support

#### Week 5-6: AI Integration
- [ ] Gemini Vision API integration
- [ ] Camera capture component
- [ ] Image preprocessing
- [ ] AI response parsing
- [ ] User confirmation flow
- [ ] Batch scanning support
- [ ] Error handling & retry logic

#### Week 7-8: Recipe Search & Basic Features
- [ ] Supercook API integration
- [ ] Recipe search by ingredients
- [ ] Recipe details page
- [ ] Basic filtering (dietary, cuisine, time)
- [ ] Recipe match scoring algorithm
- [ ] Save/favorite recipes
- [ ] Recipe rating system

**Phase 1 Deliverable**: Working MVP with core inventory + recipe search

---

### **Phase 2: Intelligence & Optimization (Weeks 9-16)**

#### Week 9-10: Smart Recommendations
- [ ] Personalization algorithm
- [ ] Recipe recommendation engine
- [ ] "Use this week" feature
- [ ] Expiration-based prioritization
- [ ] Smart substitutions
- [ ] Learning from user behavior

#### Week 11-12: Waste Analytics
- [ ] Waste tracking dashboard
- [ ] Environmental impact calculations
- [ ] Money saved calculator
- [ ] Waste trends visualization
- [ ] Weekly reports
- [ ] Achievement badges

#### Week 13-14: Meal Planning
- [ ] Weekly meal planner calendar
- [ ] Drag-and-drop interface
- [ ] Auto-generate meal plans
- [ ] Nutritional balancing
- [ ] Prep day assistant
- [ ] Leftover management

#### Week 15-16: Shopping List Intelligence
- [ ] Smart shopping list generation
- [ ] Category-based organization
- [ ] Price tracking (optional)
- [ ] Store layout customization
- [ ] Budget tracking
- [ ] Recurring items detection

**Phase 2 Deliverable**: Intelligent platform with personalization

---

### **Phase 3: Social & Advanced Features (Weeks 17-24)**

#### Week 17-18: Multi-User Households
- [ ] Household creation & management
- [ ] Invite system
- [ ] Permission levels
- [ ] Shared inventory
- [ ] Activity feed
- [ ] Member coordination tools

#### Week 19-20: Community Features
- [ ] User profiles
- [ ] Follow/unfollow system
- [ ] Recipe collections/boards
- [ ] Comments & ratings
- [ ] Social sharing
- [ ] Public recipe discovery

#### Week 21-22: Recipe Creator Studio
- [ ] Recipe builder interface
- [ ] Photo/video upload
- [ ] Nutrition calculator
- [ ] Recipe testing feedback
- [ ] Import from URL
- [ ] AI-powered recipe parsing

#### Week 23-24: Advanced Inventory
- [ ] Barcode scanning
- [ ] Voice input
- [ ] Batch operations
- [ ] Inventory history
- [ ] Smart reordering
- [ ] Inventory templates

**Phase 3 Deliverable**: Full-featured social platform

---

### **Phase 4: Monetization & Scale (Weeks 25-32)**

#### Week 25-26: Subscription System
- [ ] Stripe integration
- [ ] Tier management (Free/Pro/Family)
- [ ] Payment processing
- [ ] Subscription management
- [ ] Invoice generation
- [ ] Trial period handling

#### Week 27-28: Premium Features
- [ ] Feature gating by tier
- [ ] Usage tracking & limits
- [ ] Advanced analytics for Pro users
- [ ] Multiple households for Family tier
- [ ] Priority support system
- [ ] Ad system for free tier

#### Week 29-30: Mobile Apps
- [ ] React Native setup
- [ ] Core features ported to mobile
- [ ] Native camera integration
- [ ] Push notifications
- [ ] Offline mode with sync
- [ ] App store submission

#### Week 31-32: Integrations & Polish
- [ ] Grocery delivery APIs
- [ ] Smart home integration (Alexa, Google)
- [ ] Fitness app sync
- [ ] Calendar integration
- [ ] Performance optimization
- [ ] SEO optimization

**Phase 4 Deliverable**: Production-ready platform with monetization

---

### **Phase 5: Growth & Enterprise (Ongoing)**

#### Months 7-9: Marketing & Growth
- [ ] Content marketing strategy
- [ ] SEO optimization
- [ ] Referral program
- [ ] Influencer partnerships
- [ ] Press kit & outreach
- [ ] A/B testing framework

#### Months 10-12: Enterprise Features
- [ ] B2B licensing
- [ ] White-label options
- [ ] Restaurant mode
- [ ] Educational institution features
- [ ] Corporate wellness integration
- [ ] API for third-party integrations

#### Ongoing: Maintenance & Expansion
- [ ] International localization
- [ ] New recipe sources
- [ ] AI model improvements
- [ ] Feature requests from users
- [ ] Bug fixes & optimization
- [ ] Scaling infrastructure

---

## üí∞ Business Model & Pricing

### Freemium Tiers

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                         FREE TIER                            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚úì 50 active pantry items                                    ‚îÇ
‚îÇ ‚úì 10 AI photo scans/month                                   ‚îÇ
‚îÇ ‚úì Basic recipe search (11M+ recipes)                        ‚îÇ
‚îÇ ‚úì Manual expiration tracking                                ‚îÇ
‚îÇ ‚úì 1 household                                               ‚îÇ
‚îÇ ‚úì Basic waste analytics                                     ‚îÇ
‚îÇ ‚úì Shopping list (1 active list)                            ‚îÇ
‚îÇ ‚úó Meal planning                                             ‚îÇ
‚îÇ ‚úó Advanced AI recommendations                               ‚îÇ
‚îÇ ‚úó Priority support                                          ‚îÇ
‚îÇ ‚ö† Ads (non-intrusive)                                       ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ Price: FREE forever                                         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                      PRO TIER ‚≠ê                            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚úì Everything in Free                                        ‚îÇ
‚îÇ ‚úì UNLIMITED pantry items                                    ‚îÇ
‚îÇ ‚úì UNLIMITED AI photo scans                                  ‚îÇ
‚îÇ ‚úì Advanced AI recommendations                               ‚îÇ
‚îÇ ‚úì Meal planning (4 weeks ahead)                            ‚îÇ
‚îÇ ‚úì 3 households                                              ‚îÇ
‚îÇ ‚úì Advanced waste analytics & insights                       ‚îÇ
‚îÇ ‚úì Multiple shopping lists                                   ‚îÇ
‚îÇ ‚úì Barcode scanning                                          ‚îÇ
‚îÇ ‚úì Voice input                                               ‚îÇ
‚îÇ ‚úì Priority customer support                                 ‚îÇ
‚îÇ ‚úì Export data (CSV, PDF)                                    ‚îÇ
‚îÇ ‚úì Ad-free experience                                        ‚îÇ
‚îÇ ‚úì Early access to new features                              ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ Price: $4.99/month or $39.99/year (33% savings)            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                    FAMILY TIER üë®‚Äçüë©‚Äçüëß‚Äçüë¶                       ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚úì Everything in Pro                                         ‚îÇ
‚îÇ ‚úì Up to 6 household members                                 ‚îÇ
‚îÇ ‚úì UNLIMITED households                                      ‚îÇ
‚îÇ ‚úì Advanced family sharing controls                          ‚îÇ
‚îÇ ‚úì Family nutrition dashboard                                ‚îÇ
‚îÇ ‚úì Bulk meal planning                                        ‚îÇ
‚îÇ ‚úì Custom recipe collections (unlimited)                     ‚îÇ
‚îÇ ‚úì Family cooking challenges                                 ‚îÇ
‚îÇ ‚úì Shared grocery budgets                                    ‚îÇ
‚îÇ ‚úì Priority support for all members                          ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ Price: $7.99/month or $69.99/year (27% savings)            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### Revenue Projections (Conservative)

```
Year 1 Targets:
- 10,000 free users (baseline)
- 500 Pro subscribers (5% conversion) = $2,495/month
- 50 Family subscribers (0.5% conversion) = $399/month
- Affiliate revenue: ~$500/month
Total Year 1 Revenue: ~$40,000

Year 2 Targets:
- 50,000 free users
- 2,500 Pro subscribers (5%) = $12,475/month
- 250 Family subscribers (0.5%) = $1,997/month
- Affiliate revenue: ~$2,000/month
- B2B licensing: $5,000/month
Total Year 2 Revenue: ~$260,000

Year 3 Targets:
- 200,000 free users
- 10,000 Pro subscribers (5%) = $49,900/month
- 1,000 Family subscribers (0.5%) = $7,990/month
- Affiliate revenue: ~$10,000/month
- B2B licensing: $20,000/month
Total Year 3 Revenue: ~$1,050,000
```

---

## üß™ Testing Strategy

### Unit Tests
```javascript
// Example: Expiration calculator tests
describe('ExpirationCalculator', () => {
  it('should calculate correct expiration for refrigerated produce', () => {
    const result = calculateExpiration('lettuce', 'refrigerated', 'fresh');
    expect(result.days).toBe(5);
    expect(result.confidence).toBeGreaterThan(0.8);
  });

  it('should adjust for opened vs unopened items', () => {
    const unopened = calculateExpiration('milk', 'refrigerated', 'unopened');
    const opened = calculateExpiration('milk', 'refrigerated', 'opened');
    expect(unopened.days).toBeGreaterThan(opened.days);
  });
});

// Example: Recipe matching tests
describe('RecipeMatching', () => {
  it('should correctly calculate match percentage', () => {
    const recipeIngredients = ['chicken', 'rice', 'onion', 'garlic'];
    const userIngredients = ['chicken', 'rice', 'garlic'];
    const match = calculateMatch(recipeIngredients, userIngredients);
    expect(match.percentage).toBe(75);
  });
});
```

### Integration Tests
```javascript
// API endpoint testing
describe('Inventory API', () => {
  it('should add item to inventory', async () => {
    const response = await request(app)
      .post('/api/inventory')
      .send({
        name: 'Chicken Breast',
        quantity: 2,
        unit: 'pounds',
        storage_location_id: 'fridge-123'
      });
    
    expect(response.status).toBe(201);
    expect(response.body.data.name).toBe('Chicken Breast');
  });
});
```

### E2E Tests (Playwright)
```javascript
// User flow testing
test('complete inventory scanning flow', async ({ page }) => {
  await page.goto('/inventory/add');
  await page.click('[data-testid="camera-button"]');
  
  // Upload test image
  await page.setInputFiles('input[type="file"]', 'test-images/fridge.jpg');
  
  // Wait for AI processing
  await page.waitForSelector('[data-testid="ingredient-list"]');
  
  // Verify results
  const items = await page.$('[data-testid="ingredient-item"]');
  expect(items.length).toBeGreaterThan(0);
  
  // Confirm and save
  await page.click('[data-testid="confirm-button"]');
  await expect(page).toHaveURL('/inventory');
});
```

---

## üìä Key Metrics to Track

### Product Metrics
- **Activation**: % users who add first inventory item
- **Engagement**: Daily/Weekly/Monthly active users
- **Retention**: Day 1, Day 7, Day 30 retention
- **Feature Usage**: Scan vs manual entry ratio
- **Recipe Discovery**: Recipes viewed per session
- **Cooking Rate**: % of viewed recipes actually cooked
- **Waste Prevention**: Items saved vs wasted ratio

### Business Metrics
- **Conversion Rate**: Free ‚Üí Pro/Family
- **Churn Rate**: Monthly subscription cancellations
- **LTV**: Customer lifetime value
- **CAC**: Customer acquisition cost
- **MRR/ARR**: Monthly/Annual recurring revenue
- **NPS**: Net Promoter Score

### Technical Metrics
- **API Response Time**: < 500ms for searches
- **AI Processing Time**: < 5s for image analysis
- **Uptime**: 99.9% target
- **Error Rate**: < 0.1%
- **Page Load Time**: < 2s

---

## üé® Design System

### Color Palette
```css
/* Primary - Fresh Green (sustainability) */
--primary-50: #f0fdf4;
--primary-500: #22c55e;
--primary-900: #14532d;

/* Secondary - Orange (urgency) */
--secondary-50: #fff7ed;
--secondary-500: #f97316;
--secondary-900: #7c2d12;

/* Neutral */
--gray-50: #f9fafb;
--gray-500: #6b7280;
--gray-900: #111827;

/* Semantic */
--success: #10b981;
--warning: #fbbf24;
--error: #ef4444;
--info: #3b82f6;
```

### Typography
```css
/* Headings */
font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;

/* Body */
font-family: 'Inter', sans-serif;

/* Mono (for data) */
font-family: 'JetBrains Mono', monospace;
```

### Component Patterns
- **Cards**: Elevated, subtle shadows, rounded corners
- **Buttons**: Clear hierarchy (primary, secondary, ghost)
- **Forms**: Inline validation, helpful error messages
- **Data Viz**: Recharts with custom green-orange theme
- **Avatars**: Circle for users, square for recipes
- **Badges**: Pill-shaped for tags, square for counts

---

## üîí Security Considerations

### Authentication
- JWT tokens with short expiration (15 min access, 7 day refresh)
- HTTP-only cookies for refresh tokens
- Rate limiting on auth endpoints
- 2FA support (optional for Pro users)
- Password requirements: min 8 chars, 1 number, 1 special

### Data Protection
- All API calls over HTTPS
- RLS (Row Level Security) on Supabase
- Input sanitization and validation
- SQL injection prevention (parameterized queries)
- XSS protection (Content Security Policy)
- CSRF tokens

### Privacy
- GDPR compliance
- Data export functionality
- Account deletion (with 30-day grace period)
- Anonymous usage analytics
- Clear privacy policy
- No selling of user data

### API Security
- Rate limiting (100 requests/min for free, 1000 for Pro)
- API key rotation
- Request signing
- IP whitelisting for admin endpoints

---

## üìà Marketing & Growth Strategy

### Launch Strategy
1. **Beta Program** (Month -2 to -1)
   - 100 invite-only beta testers
   - Collect feedback and iterate
   - Build community advocates

2. **Soft Launch** (Month 1)
   - Product Hunt launch
   - Hacker News post
   - Reddit (r/MealPrepSunday, r/EatCheapAndHealthy)
   - Launch blog post

3. **Public Launch** (Month 2)
   - Press release
   - Influencer partnerships
   - Social media campaign
   - Paid ads (Google, Facebook, Instagram)

### Content Marketing
- **Blog Posts**: 2-3x per week
  - "10 Ways to Reduce Food Waste"
  - "The True Cost of Expired Food"
  - "5-Ingredient Recipes for Busy Families"
  
- **YouTube Channel**
  - App tutorials
  - Cooking with leftovers
  - Zero-waste challenges

- **Social Media**
  - Instagram: Beautiful food photos, waste tips
  - TikTok: Quick recipes, app hacks
  - Twitter: News, updates, community

### Partnerships
- Sustainability organizations
- Food banks (donate excess feature)
- Cooking influencers
- Kitchen appliance brands
- Meal kit companies (competitor partnerships)

### Referral Program
```
Refer a friend:
- Friend gets 1 month Pro free
- You get 1 month Pro free
- Friend subscribes ‚Üí You get $5 credit

Milestone rewards:
- 3 referrals ‚Üí 3 months Pro free
- 10 referrals ‚Üí 1 year Pro free
- 50 referrals ‚Üí Lifetime Pro free
```

---

## üõ†Ô∏è DevOps & Infrastructure

### Deployment Pipeline
```
GitHub ‚Üí CI/CD ‚Üí Staging ‚Üí Production

CI/CD Steps:
1. Run linting (ESLint, Prettier)
2. Run type checking (TypeScript)
3. Run unit tests
4. Run integration tests
5. Build application
6. Run E2E tests
7. Deploy to staging
8. Smoke tests
9. Manual approval
10. Deploy to production
11. Post-deployment tests
```

### Monitoring
- **Sentry**: Error tracking
- **PostHog**: Product analytics
- **Vercel Analytics**: Performance monitoring
- **Supabase Dashboard**: Database metrics
- **Custom Dashboards**: Business metrics

### Backup Strategy
- Daily automated database backups
- Point-in-time recovery (7 days)
- Weekly full backups (retained for 3 months)
- Disaster recovery plan documented

---

## üìö Documentation Plan

### User Documentation
- Getting started guide
- Feature tutorials (video + text)
- FAQ
- Troubleshooting
- Best practices

### Developer Documentation
- API reference (OpenAPI/Swagger)
- Architecture overview
- Database schema docs
- Contributing guidelines
- Code style guide

### Internal Documentation
- Runbooks for common issues
- Deployment procedures
- Database migration guide
- Third-party API documentation

---

## ‚úÖ Success Criteria

### MVP Success (Phase 1)
- ‚úÖ 100 active users
- ‚úÖ 80%+ AI ingredient recognition accuracy
- ‚úÖ < 5s average scan time
- ‚úÖ Users can find recipes in < 30s
- ‚úÖ 70%+ user satisfaction (survey)

### Product-Market Fit (Phase 2-3)
- ‚úÖ 1,000 active users
- ‚úÖ 40%+ weekly retention
- ‚úÖ 5%+ free-to-paid conversion
- ‚úÖ NPS > 40
- ‚úÖ Organic growth > 20% MoM

### Scale & Sustainability (Phase 4-5)
- ‚úÖ 10,000+ active users
- ‚úÖ $10,000+ MRR
- ‚úÖ < 5% monthly churn
- ‚úÖ Break-even on CAC within 6 months
- ‚úÖ 99.9% uptime

---

## üéØ Next Immediate Steps

1. **Validate Concept** (This Week)
   - Survey 20-30 potential users
   - Validate pain points
   - Test pricing appetite

2. **Setup Development Environment** (Week 1)
   - Initialize Git repository
   - Setup Supabase project
   - Configure development tools
   - Create project board (GitHub Projects or Linear)

3. **Design Mockups** (Week 1-2)
   - Landing page
   - Core user flows
   - Mobile screens
   - Get feedback

4. **Start Coding** (Week 2+)
   - Follow Phase 1 development plan
   - Daily commits
   - Weekly demos to potential users

---

## üîÑ Iterative Development Process

### Agile Methodology
```
Sprint Duration: 2 weeks

Sprint Structure:
- Monday: Sprint planning
- Daily: 15-min standups (if team grows)
- Friday: Sprint review & retrospective

Backlog Prioritization:
1. Must-have (MVP blockers)
2. Should-have (High impact)
3. Nice-to-have (Low effort, high value)
4. Future (Parking lot)
```

### Version Control Strategy
```
Branch Strategy (Git Flow):

main
‚îú‚îÄ‚îÄ develop
‚îÇ   ‚îú‚îÄ‚îÄ feature/inventory-scanning
‚îÇ   ‚îú‚îÄ‚îÄ feature/recipe-search
‚îÇ   ‚îú‚îÄ‚îÄ feature/meal-planning
‚îÇ   ‚îî‚îÄ‚îÄ hotfix/critical-bug-fix

Release Process:
1. Create release branch from develop
2. Test thoroughly
3. Merge to main with tag (v1.0.0)
4. Deploy to production
5. Merge back to develop
```

---

## üíª Code Quality Standards

### TypeScript Configuration
```json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

### ESLint Rules
```javascript
module.exports = {
  extends: [
    'next/core-web-vitals',
    'plugin:@typescript-eslint/recommended',
    'prettier'
  ],
  rules: {
    'no-console': ['warn', { allow: ['error', 'warn'] }],
    'prefer-const': 'error',
    'no-var': 'error',
    '@typescript-eslint/no-unused-vars': ['error', { 
      argsIgnorePattern: '^_' 
    }],
    'react-hooks/exhaustive-deps': 'warn'
  }
};
```

### Code Review Checklist
- [ ] Follows TypeScript strict mode
- [ ] All functions have type definitions
- [ ] Error handling implemented
- [ ] Loading states for async operations
- [ ] Accessible (ARIA labels, keyboard navigation)
- [ ] Mobile responsive
- [ ] Tests written for new features
- [ ] No console.logs in production code
- [ ] Comments for complex logic
- [ ] Performance optimized (memoization, lazy loading)

---

## üéÆ User Onboarding Flow

### First-Time User Experience

**Step 1: Welcome Screen**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                         ‚îÇ
‚îÇ     ü•ó Welcome to Recipe Rescue!        ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   Never waste food again. Smart         ‚îÇ
‚îÇ   inventory tracking + recipe           ‚îÇ
‚îÇ   suggestions using what you have.      ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   [Get Started] [Learn More]            ‚îÇ
‚îÇ                                         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Step 2: Quick Setup**
```
Question 1: What's your cooking skill level?
‚óã Beginner    ‚óã Intermediate    ‚óã Advanced

Question 2: Any dietary preferences? (multi-select)
‚ñ° Vegetarian   ‚ñ° Vegan         ‚ñ° Gluten-Free
‚ñ° Dairy-Free   ‚ñ° Nut-Free      ‚ñ° None

Question 3: How often do you cook?
‚óã Daily    ‚óã Few times/week    ‚óã Weekly    ‚óã Occasionally

Question 4: Main goal with Recipe Rescue?
‚óã Reduce food waste
‚óã Save money on groceries
‚óã Discover new recipes
‚óã Meal planning
```

**Step 3: First Inventory Scan**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Let's start with your first scan!     ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   üì∏ Take a photo of your fridge        ‚îÇ
‚îÇ       or pantry                         ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   Or skip and add items manually        ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   [Take Photo] [Add Manually] [Skip]    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Step 4: AI Results & Confirmation**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   We found these ingredients:           ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   ‚úì Chicken breast (2 pieces)          ‚îÇ
‚îÇ   ‚úì Milk (1 carton)                    ‚îÇ
‚îÇ   ‚úì Lettuce (1 head)                   ‚îÇ
‚îÇ   ? Tomato (3) - Not sure? Edit         ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   Tap any item to edit or remove        ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   [Confirm & Continue]                  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Step 5: Set Expiration Dates**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   When do these items expire?           ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   Chicken breast                        ‚îÇ
‚îÇ   Suggested: 2 days (üìç)                ‚îÇ
‚îÇ   [Change Date]                         ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   üí° Tip: We'll remind you before       ‚îÇ
‚îÇ   items expire!                         ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   [Use Suggestions] [Set Manually]      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Step 6: First Recipe Suggestions**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   üéâ You can make 47 recipes!           ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   Top Priority (using expiring items):  ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   üçó Lemon Garlic Chicken               ‚îÇ
‚îÇ   ‚è± 30 min  |  ‚≠ê 4.8  |  üî• 96% match ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   [View Recipes] [Find More]            ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   [Complete Setup]                      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Step 7: Optional - Create Account**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Save your progress?                   ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   Create a free account to:             ‚îÇ
‚îÇ   ‚Ä¢ Sync across devices                 ‚îÇ
‚îÇ   ‚Ä¢ Access from anywhere                ‚îÇ
‚îÇ   ‚Ä¢ Get personalized recommendations    ‚îÇ
‚îÇ   ‚Ä¢ Track your waste reduction          ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ   [Create Account]                      ‚îÇ
‚îÇ   [Continue Without Account]            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

---

## üéØ Feature Prioritization Matrix

```
High Impact, Low Effort (DO FIRST):
‚îú‚îÄ‚îÄ Manual ingredient entry with autocomplete
‚îú‚îÄ‚îÄ Basic expiration date tracking
‚îú‚îÄ‚îÄ Recipe search by ingredients
‚îú‚îÄ‚îÄ Save favorite recipes
‚îî‚îÄ‚îÄ Shopping list generation

High Impact, High Effort (PLAN CAREFULLY):
‚îú‚îÄ‚îÄ AI photo recognition
‚îú‚îÄ‚îÄ Personalized recommendations
‚îú‚îÄ‚îÄ Meal planning calendar
‚îú‚îÄ‚îÄ Waste analytics dashboard
‚îî‚îÄ‚îÄ Multi-user households

Low Impact, Low Effort (FILL GAPS):
‚îú‚îÄ‚îÄ Dark mode
‚îú‚îÄ‚îÄ Export data
‚îú‚îÄ‚îÄ Recipe collections
‚îú‚îÄ‚îÄ Social sharing
‚îî‚îÄ‚îÄ Notification preferences

Low Impact, High Effort (AVOID):
‚îú‚îÄ‚îÄ Smart fridge integration
‚îú‚îÄ‚îÄ AR ingredient scanning
‚îú‚îÄ‚îÄ Video recipe player
‚îú‚îÄ‚îÄ Voice recipe assistant
‚îî‚îÄ‚îÄ Blockchain food tracking (lol)
```

---

## üîß Performance Optimization Strategy

### Frontend Optimization
```javascript
// 1. Code Splitting
const RecipeDetails = lazy(() => import('./RecipeDetails'));
const MealPlanner = lazy(() => import('./MealPlanner'));

// 2. Image Optimization
import Image from 'next/image';
<Image 
  src={ingredient.image} 
  width={100} 
  height={100}
  loading="lazy"
  placeholder="blur"
/>

// 3. Memoization
const expensiveCalculation = useMemo(() => 
  calculateRecipeMatches(inventory, recipes),
  [inventory, recipes]
);

// 4. Debouncing
const debouncedSearch = useDebounce(searchTerm, 300);

// 5. Virtual Lists (for large inventories)
import { FixedSizeList } from 'react-window';
```

### Backend Optimization
```sql
-- 1. Database Indexing (already covered above)

-- 2. Query Optimization
-- Instead of:
SELECT * FROM recipes WHERE ...

-- Use:
SELECT id, title, image_url, rating_avg, prep_time_minutes
FROM recipes 
WHERE ...
LIMIT 20;

-- 3. Caching Strategy
-- Redis cache for:
- Popular recipes (24 hour TTL)
- Recipe match scores (1 hour TTL)
- User preferences (session TTL)

-- 4. Batch Operations
-- Instead of N queries:
INSERT INTO inventory_items (name, quantity) VALUES ('chicken', 2);
INSERT INTO inventory_items (name, quantity) VALUES ('rice', 1);

-- Use one:
INSERT INTO inventory_items (name, quantity) VALUES 
  ('chicken', 2),
  ('rice', 1),
  ('onion', 3);
```

### API Response Optimization
```javascript
// Pagination for large datasets
GET /api/recipes?page=1&limit=20

// Partial responses
GET /api/recipes?fields=id,title,image,rating

// Compression
app.use(compression());

// CDN for static assets
// Cloudflare or Vercel Edge Network
```

---

## üß© Third-Party Integrations

### Essential Integrations (Phase 1-3)
```javascript
// 1. Gemini AI (Image Recognition)
// Already covered above

// 2. Supabase (Auth + Database)
import { createClient } from '@supabase/supabase-js';
const supabase = createClient(url, anonKey);

// 3. Stripe (Payments)
import Stripe from 'stripe';
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// 4. SendGrid/Resend (Email)
import { Resend } from 'resend';
const resend = new Resend(process.env.RESEND_API_KEY);

// 5. Sentry (Error Tracking)
import * as Sentry from '@sentry/nextjs';
Sentry.init({ dsn: process.env.SENTRY_DSN });
```

### Optional Integrations (Phase 4-5)
```javascript
// 1. Instacart API (Grocery Delivery)
// 2. Amazon Fresh API
// 3. Open Food Facts (Barcode Database)
// 4. Nutritionix API (Nutrition Data)
// 5. Spoonacular API (Recipe Backup)
// 6. Twilio (SMS Notifications)
// 7. Cloudinary (Image Hosting)
// 8. Algolia (Search Enhancement)
// 9. PostHog (Product Analytics)
// 10. Intercom (Customer Support)
```

---

## üì± Mobile App Considerations

### React Native vs Web

**Pros of Native App:**
- Better camera integration
- Push notifications (more reliable)
- Offline mode (better UX)
- Barcode scanning (easier)
- App store visibility
- Native feel and performance

**Cons of Native App:**
- 2x development effort (iOS + Android)
- App store approval process
- Separate deployment pipeline
- Larger codebase to maintain
- Slower iteration speed

**Recommendation:** Start with PWA (Progressive Web App)
- Install prompt on mobile
- Offline support via Service Workers
- Push notifications (via web APIs)
- Camera access (via web APIs)
- 80% of native experience, 20% of effort
- Later port to React Native if needed

### PWA Features
```javascript
// manifest.json
{
  "name": "Recipe Rescue",
  "short_name": "Recipe Rescue",
  "description": "Smart food waste reduction",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#22c55e",
  "icons": [
    {
      "src": "/icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}

// Service Worker for offline support
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});
```

---

## üåç Internationalization (i18n)

### Language Support Strategy

**Phase 1 (Launch):** English only

**Phase 2 (Growth):**
- Spanish (2nd largest market)
- French
- German

**Phase 3 (Scale):**
- Portuguese (Brazil)
- Italian
- Japanese
- Mandarin Chinese
- Hindi
- Arabic

### Implementation
```javascript
// Using next-intl
import {useTranslations} from 'next-intl';

function InventoryList() {
  const t = useTranslations('Inventory');
  
  return (
    <div>
      <h1>{t('title')}</h1>
      <p>{t('description')}</p>
      <button>{t('addItem')}</button>
    </div>
  );
}

// messages/en.json
{
  "Inventory": {
    "title": "My Pantry",
    "description": "Track your ingredients",
    "addItem": "Add Item"
  }
}

// messages/es.json
{
  "Inventory": {
    "title": "Mi Despensa",
    "description": "Rastrea tus ingredientes",
    "addItem": "Agregar Art√≠culo"
  }
}
```

### Localization Considerations
- Date formats (MM/DD/YYYY vs DD/MM/YYYY)
- Number formats (1,000.50 vs 1.000,50)
- Currency symbols and placement
- Measurement units (imperial vs metric)
- Right-to-left languages (Arabic, Hebrew)
- Pluralization rules (differs by language)

---

## üéì Learning Resources & Tech Stack Deep Dive

### For You to Master:

**React Advanced Patterns:**
- Server Components (Next.js 13+)
- Streaming SSR
- React Query for server state
- Zustand for client state
- Advanced hooks patterns

**AI Integration:**
- Gemini API documentation
- Prompt engineering techniques
- Image preprocessing for better accuracy
- Handling AI errors gracefully
- Rate limiting strategies

**Database Optimization:**
- PostgreSQL query optimization
- Index strategies
- RLS (Row Level Security) in Supabase
- Database migrations with Prisma/Drizzle
- Connection pooling

**Performance:**
- Core Web Vitals optimization
- Image optimization techniques
- Code splitting strategies
- Caching layers
- CDN configuration

**Mobile Development:**
- React Native essentials
- Expo workflow
- Camera APIs
- Push notifications
- Offline storage (WatermelonDB)

---

## üö® Risk Mitigation

### Technical Risks

**Risk 1: AI Accuracy Issues**
- Mitigation: Always show confidence scores, allow user editing
- Backup: Manual entry is always available
- Learning: Collect feedback to improve prompts

**Risk 2: API Rate Limits (Gemini)**
- Mitigation: Implement client-side image compression
- Backup: Queue system for high traffic
- Alternative: Train custom model if needed

**Risk 3: Scalability Issues**
- Mitigation: Start with serverless (auto-scaling)
- Monitor: Set up alerts for performance degradation
- Plan: Database read replicas if needed

**Risk 4: Data Loss**
- Mitigation: Automated backups (daily)
- Testing: Regular backup restoration tests
- Redundancy: Multi-region database setup (production)

### Business Risks

**Risk 1: Low User Adoption**
- Mitigation: Extensive user testing before launch
- Pivot: Adjust features based on feedback
- Marketing: Strong launch strategy

**Risk 2: High Churn Rate**
- Mitigation: Focus on core value (waste reduction)
- Engagement: Email notifications, push alerts
- Retention: Gamification and achievements

**Risk 3: Competition**
- Mitigation: Unique features (AI scanning + expiration)
- Speed: Iterate faster than competitors
- Community: Build loyal user base

**Risk 4: Monetization Failure**
- Mitigation: Multiple revenue streams
- Testing: Price testing with early users
- Flexibility: Adjust tiers based on data

---

## üìû Support Strategy

### Self-Service Support
```
Help Center (Zendesk/Intercom):
‚îú‚îÄ‚îÄ Getting Started
‚îÇ   ‚îú‚îÄ‚îÄ How to scan ingredients
‚îÇ   ‚îú‚îÄ‚îÄ Adding items manually
‚îÇ   ‚îî‚îÄ‚îÄ Setting expiration dates
‚îú‚îÄ‚îÄ Features
‚îÇ   ‚îú‚îÄ‚îÄ Finding recipes
‚îÇ   ‚îú‚îÄ‚îÄ Meal planning
‚îÇ   ‚îî‚îÄ‚îÄ Shopping lists
‚îú‚îÄ‚îÄ Account
‚îÇ   ‚îú‚îÄ‚îÄ Creating an account
‚îÇ   ‚îú‚îÄ‚îÄ Subscription management
‚îÇ   ‚îî‚îÄ‚îÄ Household sharing
‚îú‚îÄ‚îÄ Troubleshooting
‚îÇ   ‚îú‚îÄ‚îÄ Camera not working
‚îÇ   ‚îú‚îÄ‚îÄ AI recognition issues
‚îÇ   ‚îî‚îÄ‚îÄ Login problems
‚îî‚îÄ‚îÄ FAQ
    ‚îú‚îÄ‚îÄ Is my data secure?
    ‚îú‚îÄ‚îÄ How accurate is AI recognition?
    ‚îî‚îÄ‚îÄ What if I waste food?
```

### Tiered Support
- **Free Users:** Help center + Community forum
- **Pro Users:** Email support (24-48 hour response)
- **Family Users:** Priority email + Chat support

### Community Forum
- User-driven support
- Recipe sharing
- Tips and tricks
- Feature requests
- Bug reports

---

## üéâ Launch Checklist

### Pre-Launch (2 weeks before)
- [ ] All MVP features tested and working
- [ ] Database migrations tested
- [ ] Backup systems verified
- [ ] Performance tested (load testing)
- [ ] Security audit completed
- [ ] Privacy policy finalized
- [ ] Terms of service finalized
- [ ] Help documentation complete
- [ ] Support email setup (support@reciperescue.com)
- [ ] Social media accounts created
- [ ] Press kit prepared
- [ ] Beta testers recruited (50-100)
- [ ] Analytics tracking verified
- [ ] Error monitoring active

### Launch Day
- [ ] Deploy to production
- [ ] Smoke tests passing
- [ ] Monitoring dashboards active
- [ ] Product Hunt post scheduled
- [ ] Social media announcements
- [ ] Email to beta users
- [ ] Reddit posts in relevant communities
- [ ] Hacker News submission
- [ ] Team ready for support influx
- [ ] Celebration! üéä

### Post-Launch (First Week)
- [ ] Monitor errors closely
- [ ] Respond to all support requests
- [ ] Track key metrics daily
- [ ] Collect user feedback
- [ ] Fix critical bugs immediately
- [ ] Engage with community
- [ ] Thank early adopters
- [ ] Plan first iteration

---

## üèÜ Success Stories (Vision for Impact)

### Individual Impact
*"I used to throw away $100 worth of groceries every month. With Recipe Rescue, I've reduced that to almost zero. I'm saving money and feeling good about reducing waste."* - Sarah, Pro User

### Family Impact
*"Our household of 4 was constantly arguing about what to cook. Now we all share one pantry, plan meals together, and everyone knows what's expiring. Game changer!"* - The Johnson Family

### Environmental Impact
*"Our community challenge prevented 500kg of food waste in one month. That's incredible!"* - Community Challenge Participant

### Your Impact Goals
- **Year 1:** Save 100 tons of food from landfills
- **Year 2:** Save 1,000 tons, $5M in user savings
- **Year 3:** Save 10,000 tons, 50,000 households using the platform

---

## üéØ FINAL SUMMARY: Your Action Plan

### Month 1: Foundation
1. Setup development environment
2. Build core inventory management
3. Integrate Gemini AI
4. Basic recipe search (Supercook)
5. Deploy MVP to staging

### Month 2: Polish & Launch
1. User testing and iteration
2. Add expiration tracking
3. Build onboarding flow
4. Launch publicly (Product Hunt)
5. Collect initial feedback

### Month 3: Intelligence
1. Implement recommendation engine
2. Add waste analytics
3. Build meal planning
4. Optimize performance
5. Start content marketing

### Month 4: Social & Growth
1. Add household sharing
2. Build community features
3. Recipe creator studio
4. Referral program
5. Influencer partnerships

### Month 5: Monetization
1. Stripe integration
2. Launch Pro tier
3. Build subscription management
4. Add premium features
5. Optimize conversion funnel

### Month 6: Scale
1. Mobile app (React Native)
2. International expansion
3. B2B pilot program
4. Advanced integrations
5. Plan for Year 2

---

## üìä Dashboard Mockup (Key Metrics View)

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Recipe Rescue - Dashboard                     üë§ Rajeet   ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                                                            ‚îÇ
‚îÇ  üìä This Month's Impact                                    ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê          ‚îÇ
‚îÇ  ‚îÇ Food Saved   ‚îÇ Money Saved  ‚îÇ CO2 Reduced  ‚îÇ          ‚îÇ
‚îÇ  ‚îÇ   15.2 kg    ‚îÇ    $127      ‚îÇ   45.6 kg    ‚îÇ          ‚îÇ
‚îÇ  ‚îÇ   ‚Üë 23%      ‚îÇ    ‚Üë 18%     ‚îÇ   ‚Üë 23%      ‚îÇ          ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îÇ
‚îÇ                                                            ‚îÇ
‚îÇ  ‚ö†Ô∏è  Urgent (3 items expiring in 2 days)                  ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê          ‚îÇ
‚îÇ  ‚îÇ  ü•¨ Spinach        ü•õ Milk      üçó Chicken  ‚îÇ          ‚îÇ
‚îÇ  ‚îÇ  Expires tomorrow  2 days left  2 days     ‚îÇ          ‚îÇ
‚îÇ  ‚îÇ  [Find Recipes ‚Üí]                          ‚îÇ          ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îÇ
‚îÇ                                                            ‚îÇ
‚îÇ  üç≥ Recommended Recipes (Using Expiring Items)            ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                   ‚îÇ
‚îÇ  ‚îÇ Spinach   ‚îÇ Chicken   ‚îÇ Pasta     ‚îÇ                   ‚îÇ
‚îÇ  ‚îÇ Soup      ‚îÇ Stir Fry  ‚îÇ Primavera ‚îÇ                   ‚îÇ
‚îÇ  ‚îÇ ‚≠ê 4.8     ‚îÇ ‚≠ê 4.9     ‚îÇ ‚≠ê 4.7     ‚îÇ                   ‚îÇ
‚îÇ  ‚îÇ 98% match ‚îÇ 95% match ‚îÇ 92% match ‚îÇ                   ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                   ‚îÇ
‚îÇ                                                            ‚îÇ
‚îÇ  üìÖ This Week's Meal Plan          [+ Add Meal]           ‚îÇ
‚îÇ  Monday    ‚Üí Chicken Stir Fry                            ‚îÇ
‚îÇ  Tuesday   ‚Üí [Plan a meal]                               ‚îÇ
‚îÇ  Wednesday ‚Üí Spinach Soup                                ‚îÇ
‚îÇ                                                            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

---

## üé¨ That's the Complete Plan!

You now have:
‚úÖ **Full product specification** (all Supercook features + innovations)
‚úÖ **Complete technical architecture** (frontend, backend, database)
‚úÖ **Detailed database schema** (all tables with relationships)
‚úÖ **6-month development roadmap** (week-by-week breakdown)
‚úÖ **Business model** (freemium tiers + revenue projections)
‚úÖ **Marketing strategy** (launch plan + growth tactics)
‚úÖ **Risk mitigation** (technical + business risks)
‚úÖ **Success metrics** (product + business KPIs)

**Total Estimated Effort:**
- Solo developer: 6-9 months to production
- With 1 designer + 1 developer: 4-6 months
- With full team (3-4 people): 3-4 months

**This is a $1M+ opportunity if executed well.**

Ready to start building? Let me know which phase you want to dive into first, and I can provide specific code, designs, or implementation details! üöÄ